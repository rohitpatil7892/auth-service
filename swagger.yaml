openapi: "3.0.0"
info:
  title: Auth Service API
  version: "1.0.0"
  description: |
    OpenAPI 3.0 specification for the Auth Service API supporting Google OAuth,
    JWT-based authentication, session management, logout, and user profile retrieval.
servers:
  - url: http://localhost:3000
    description: Local development server
paths:
  /health:
    get:
      summary: Health Check
      description: Check if the service is running.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  service:
                    type: string
                    example: auth-service
  /auth/google:
    get:
      summary: Initiate Google OAuth
      description: Redirects the user to Google for authentication.
      responses:
        "302":
          description: Redirect to Google's OAuth endpoint
    post:
      summary: Google Token Authentication
      description: Authenticate using a Google ID token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Google ID token
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Session token
                  user:
                    $ref: '#/components/schemas/User'
        "400":
          description: Bad Request - token missing
        "401":
          description: Unauthorized - invalid token
  /auth/google/callback:
    get:
      summary: Google OAuth Callback
      description: OAuth callback endpoint after Google authentication.
      responses:
        "302":
          description: Redirect to frontend with session token or error
  /auth/session:
    post:
      summary: Create Session
      description: Create a new session from an existing JWT.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Session created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Session created successfully
                  token:
                    type: string
                    description: New session token
        "401":
          description: Unauthorized - no token or invalid token
  /auth/logout:
    post:
      summary: Logout User
      description: Invalidate the current session token.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully
        "401":
          description: Unauthorized - token missing or invalid
  /auth/me:
    get:
      summary: Get Current User
      description: Fetch the profile of the authenticated user.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Unauthorized - token missing or invalid
        "404":
          description: Not Found - user does not exist
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 123
        email:
          type: string
          example: user@example.com
        name:
          type: string
          example: User Name
        picture:
          type: string
          example: https://example.com/avatar.jpg 